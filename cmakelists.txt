cmake_minimum_required(VERSION 3.10)
project(CTextEdit VERSION 0.1.0 LANGUAGES C)

set(CMAKE_C_STANDARD 99)
set(CMAKE_C_STANDARD_REQUIRED ON)

if(CMAKE_C_COMPILER_ID MATCHES "GNU|Clang")
    add_compile_options(-Wall -Wextra -Werror -pedantic)
endif()

include_directories(${PROJECT_SOURCE_DIR}/inc)

file(MAKE_DIRECTORY ${PROJECT_SOURCE_DIR}/inc)
file(MAKE_DIRECTORY ${PROJECT_SOURCE_DIR}/src)

if(EXISTS "${PROJECT_SOURCE_DIR}/src/main.h")
    configure_file(${PROJECT_SOURCE_DIR}/src/main.h ${PROJECT_SOURCE_DIR}/inc/main.h COPYONLY)
endif()

add_executable(ctextedit 
    src/main.c
)

option(USE_SANITIZER "Use address sanitizer for memory debugging" OFF)
if(USE_SANITIZER AND CMAKE_C_COMPILER_ID MATCHES "GNU|Clang")
    target_compile_options(ctextedit PRIVATE -fsanitize=address,undefined)
    target_link_options(ctextedit PRIVATE -fsanitize=address,undefined)
endif()

if(UNIX)
    target_link_libraries(ctextedit m)  
endif()

install(TARGETS ctextedit DESTINATION bin)

add_custom_target(run
    COMMAND ctextedit
    DEPENDS ctextedit
    WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
    COMMENT "Running ctextedit..."
)

find_program(VALGRIND valgrind)
if(VALGRIND)
    add_custom_target(memcheck
        COMMAND ${VALGRIND} --leak-check=full --show-leak-kinds=all --track-origins=yes 
                --verbose --log-file=valgrind-out.txt $<TARGET_FILE:ctextedit>
        DEPENDS ctextedit
        WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
        COMMENT "Running ctextedit with Valgrind..."
    )
endif()